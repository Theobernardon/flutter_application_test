name: Flutter CD

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
  # Permet de déclencher manuellement le workflow depuis l'interface GitHub

jobs:
  builds:
    # Définit une matrice pour exécuter le job sur plusieurs systèmes d'exploitation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter 3.29.2 précisément, avec cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.2
          cache: true  # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Vérifier que le code est propre (analyse statique)
      - name: Analyze code
        run: flutter analyze

      # 5️⃣ - Lancer les tests unitaires
      - name: Run tests
        run: flutter test

      #### Windows Build Steps ####
      # 6️⃣ - Builder ton application Windows
      - name: Build Flutter Windows App
        if: matrix.os == 'windows-latest'
        run: flutter build windows --release

      # 7️⃣ - Installer Inno Setup pour créer un installeur EXE
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest'
        run: choco install innosetup -y
        # Chocolatey est installé sur les runners GitHub Windows, donc "choco" fonctionne direct

      # 8️⃣ - Compiler ton script Inno Setup (.iss) pour générer l'installeur
      - name: Create Installer with Inno Setup
        if: matrix.os == 'windows-latest' && success()
        run: |
          ISCC windows/installer/installer.iss
        # Assure-toi que ton fichier .iss soit à l'endroit indiqué (par exemple dans un dossier 'installer/')
        # ISCC est la commande CLI du compilateur Inno Setup.

      # 8️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux build artifacts
        if: matrix.os == 'windows-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-windows
          path: installer/output/SetupMonApp.exe

      #### Linux Build Steps ####
      # 6️⃣ - Installer les dépendances nécessaires pour Linux
      - name: Installer les dépendances Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 7️⃣ - Builder ton application Linux
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: flutter build linux --release

      # 8️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux build artifacts
        if: matrix.os == 'ubuntu-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-linux
          path: build/linux/x64/release/bundle/

  release:
    needs: builds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: flutter-build-windows
          path: artifacts/flutter-build-windows

      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: flutter-build-linux
          path: artifacts/flutter-build-linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/flutter-build-windows/**
            artifacts/flutter-build-linux/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

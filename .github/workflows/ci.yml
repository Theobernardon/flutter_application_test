name: Flutter CI

# Déclenche le workflow sur les pull_request
# pour les branches spécifiées : main, dev** et release/**
on:
  pull_request:
    branches:
      - main
      - dev**
      - release/**
  workflow_dispatch: # Tu peux aussi le lancer manuellement depuis l'interface GitHub

jobs:
  # Dans un premier temps on fait l'analyse du code et les tests unitaires
  Analyse-et-tests:
    # Définit les systèmes d'exploitation sur lesquels exécuter le job
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter 3.29.2 précisément, avec cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.2
          cache: true  # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Vérifier que le code est propre (analyse statique)
      - name: Analyze code
        run: flutter analyze

      # 5️⃣ - Lancer les tests unitaires
      - name: Run tests
        run: flutter test
  
  # Puis si l'analyse et les tests sont OK on peut build les applications pour chaque systèmes d'exploitation
  Builds:
    needs: Analyse-et-tests
    # Définit une matrice pour exécuter le job sur plusieurs systèmes d'exploitation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter 3.29.2 précisément, avec cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.2
          cache: true  # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Builder ton application Windows
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: flutter build windows

      # 5️⃣ - Archiver les artefacts de la build Windows
      - name: Archive Windows build artifacts
        if: matrix.os == 'windows-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-windows
          path: build\windows\x64\runner\Release\

      # 4️⃣ - Installer les dépendances nécessaires pour Linux
      - name: Installer les dépendances Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 5️⃣ - Builder ton application Linux
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: flutter build linux

      # 6️⃣ - Archiver les artefacts de la build Linux
      - name: Archive Linux build artifacts
        if: matrix.os == 'ubuntu-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-linux
          path: build/linux/x64/release/bundle/

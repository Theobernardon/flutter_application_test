name: Flutter CI

# Déclenche le workflow sur les pull_request
# pour les branches spécifiées : main, dev** et release/**
on:
  pull_request:
    branches:
      - main
      - dev**
      - release/**
  workflow_dispatch: # Tu peux aussi le lancer manuellement depuis l'interface GitHub

jobs:
  # Dans un premier temps on fait l'analyse du code et les tests unitaires
  Analyse-et-tests:
    # Définit les systèmes d'exploitation sur lesquels exécuter le job
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter avec pubspec.yaml, et cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable # Utilise le canal stable pour la version de Flutter
          flutter-version-file: pubspec.yaml
          cache: true # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Vérifier que le code est propre (analyse statique)
      - name: Analyze code
        run: flutter analyze

      # 5️⃣ - Lancer les tests unitaires
      - name: Run tests
        run: flutter test

  # Puis si l'analyse et les tests sont OK on peut build les applications pour chaque systèmes d'exploitation
  Builds:
    needs: Analyse-et-tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        platforms: [windows, linux] # Récupère la liste des plateformes à builder
        include:
          - platform: windows
            os: windows-latest
            path: build\windows\x64\runner\Release\
          - platform: linux
            os: ubuntu-latest
            path: build/linux/x64/release/bundle/

    steps:
      # 1️⃣ - Cloner ton code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ - Installer Flutter avec pubspec.yaml, et cache automatique
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable # Utilise le canal stable pour la version de Flutter
          flutter-version-file: pubspec.yaml
          cache: true # Active le cache pub + flutter automatiquement

      # 3️⃣ - Récupérer les dépendances Dart/Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4️⃣ - Installer les dépendances nécessaires pour Linux si on build sur Linux
      - name: Installer les dépendances Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglib2.0-dev

      # 5️⃣ - Builder ton application pour la plateforme spécifiée
      - name: Build for ${{ matrix.platform }}
        run: flutter build ${{ matrix.platform }}

      # 6️⃣ - Archiver les artefacts de la build pour la plateforme spécifiée
      - name: Archive ${{ matrix.platform }} build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-${{ matrix.platform }}
          path: ${{ matrix.path }}
